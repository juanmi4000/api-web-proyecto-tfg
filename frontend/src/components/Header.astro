---
import Server from "@/multimedia/iconos/Server.astro";
import Enlaces from "@comp/Enlaces.astro";

const { pathname } = Astro.url;
const nombreRuta =
  pathname.length > 1 && pathname.endsWith("/")
    ? pathname.slice(0, -1)
    : pathname;

const enlaces = [
  { href: "/", texto: "Inicio" },
  { href: "/documentacion", texto: "Documentación" },
  { href: "/explorador", texto: "Explorador de la API" },
].map((enlace) => ({
  ...enlace,
  activo: nombreRuta === enlace.href,
}));
---

<header
  id="header"
  class="relative max-h-screen w-full bg-[rgb(var(--color-header))]"
>
  <nav class="flex items-center justify-between px-5 sm:px-10 lg:px-14">
    <article class="flex h-14 p-1">
      <a class="w-full h-full cursor-pointer" href="/"
        ><Server class="w-full h-full cursor-pointer" /></a
      >
    </article>
    <article class="hidden sm:flex sm:flex-grow sm:justify-center">
      <ul class="flex gap-4">
        {
          enlaces.map(({ href, texto, activo }) => (
            <li>
              <Enlaces href={href} texto={texto} {activo} />
            </li>
          ))
        }
      </ul>
    </article>
    <article class="z-10 sm:hidden">
      <button id="boton-menu" aria-label="Mostrar menú">
        <!-- Ver si hay que cambiar aria-label cuando lo muestre -->
        <span class="bg-white"></span>
        <span class="bg-white"></span>
        <span class="bg-white"></span>
      </button>
    </article>
  </nav>
  <article
    id="menu"
    class="hidden absotule h-screen top-0 left-0 w-full z-20 justify-center items-center animate-slide-in-top duration-100"
  >
    <ul class="flex flex-col gap-4">
      {
        enlaces.map(({ href, texto, activo }) => (
          <li>
            <Enlaces href={href} texto={texto} {activo} />
          </li>
        ))
      }
    </ul>
  </article>
</header>

<script>
  const botonMenu = document.getElementById("boton-menu");
  botonMenu?.addEventListener("click", () => {
    const menu = document.getElementById("menu");
    const mainOcultar = document.getElementById("ocultar-main");
    const footerOcultar = document.getElementById("ocultar-footer");
    if (menu == null || mainOcultar == null) return;

    const dataActivo = menu.getAttribute("data-mostrar");
    if (dataActivo) {
      menu.removeAttribute("data-mostrar");
      menu.classList.add("hidden");
      mainOcultar.classList.remove("hidden");
      footerOcultar?.classList.remove("hidden");
      menu.classList.remove("flex", "justify-center", "items-center");
      botonMenu.querySelectorAll("span").forEach((span) => {
        span.classList.remove("span-cambiar")
      })
    } else {
      menu.setAttribute("data-mostrar", "true");
      mainOcultar.classList.add("hidden");
      footerOcultar?.classList.add("hidden");
      menu.classList.remove("hidden");
      menu.classList.add("flex", "justify-center", "items-center");
      botonMenu.querySelectorAll("span").forEach((span) => {
        span.classList.add("span-cambiar")
      })
    }
  });
</script>

<style>
  #menu {
    height: calc(100vh - 56px);
  }
  button {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 3rem;
    height: 3rem;
    border: 0;
    background: transparent;
    gap: 0.65rem;

    > span {
      height: 2px;
      width: 75%;
      border-radius: 5px;
      transition: all 0.5s;
      transform-origin: left;
    }
    &:hover span:first-child {
      transform: rotate(45deg);
    }
    &:hover span:nth-child(2) {
      opacity: 0;
    }
    &:hover span:last-child {
      transform: rotate(-45deg);
    }
  }

  .span-cambiar:first-child {
    transform: rotate(45deg);
  }

  .span-cambiar:nth-child(2) {
    opacity: 0;
  }

  .span-cambiar:last-child {
    transform: rotate(-45deg);
  }
</style>
